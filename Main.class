// Source code is decompiled from a .class file using FernFlower decompiler (from Intellij IDEA).
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class Main {
   private static final int SIZE = 4;
   private static JPanel[][] cells = new JPanel[4][4];

   public Main() {
   }

   public static void main(String[] var0) {
      JFrame var1 = new JFrame("Snakes and Ladders 4x4");
      var1.setDefaultCloseOperation(3);
      var1.setSize(600, 600);
      var1.setLayout(new BorderLayout());
      JPanel var2 = new JPanel(new GridLayout(4, 4));

      for(int var3 = 3; var3 >= 0; --var3) {
         for(int var4 = 0; var4 < 4; ++var4) {
            JPanel var5 = new JPanel();
            var5.setBorder(BorderFactory.createLineBorder(Color.black));
            var5.setBackground(Color.white);
            cells[var3][var4] = var5;
            var2.add(var5);
         }
      }

      JPanel var14 = new JPanel();
      JTextField var15 = new JTextField("Player 1", 8);
      JTextField var16 = new JTextField("Player 2", 8);
      JButton var6 = new JButton("Start");
      JButton var7 = new JButton("Roll Dice");
      var7.setEnabled(false);
      DicePanel var8 = new DicePanel();
      JTextArea var9 = new JTextArea(5, 30);
      var9.setEditable(false);
      var14.add(var15);
      var14.add(var16);
      var14.add(var6);
      var14.add(var7);
      var14.add(var8);
      var1.add(var2, "Center");
      var1.add(var14, "North");
      var1.add(new JScrollPane(var9), "South");
      Player[] var10 = new Player[2];
      int[] var11 = new int[]{0};
      Random var12 = new Random();
      Board var13 = new Board();
      var6.addActionListener((var6x) -> {
         var10[0] = new Player(var15.getText(), Color.RED);
         var10[1] = new Player(var16.getText(), Color.BLUE);
         var10[0].setPosition(1);
         var10[1].setPosition(1);
         var9.setText(var10[0].getName() + " starts!\n");
         var7.setEnabled(true);
         clearBoard();
         drawSnakesAndLadders(var13);
         updateBoard(var10, var13);
      });
      var7.addActionListener((var7x) -> {
         Player var8x = var10[var11[0]];
         int var9x = var12.nextInt(6) + 1;
         var8.setValue(var9x);
         int var10x = var8x.getPosition() + var9x;
         if (var10x > 16) {
            var10x = var8x.getPosition();
         }

         var10x = var13.checkPosition(var10x, var9, var8x);
         var8x.setPosition(var10x);
         var9.append(var8x.getName() + " rolled " + var9x + " -> " + var10x + "\n");
         updateBoard(var10, var13);
         if (var10x == 16) {
            var9.append(var8x.getName() + " wins!\n");
            var7.setEnabled(false);
         } else {
            var11[0] = 1 - var11[0];
            var9.append("Next turn: " + var10[var11[0]].getName() + "\n");
         }

      });
      var1.setVisible(true);
   }

   private static void clearBoard() {
      for(int var0 = 0; var0 < 4; ++var0) {
         for(int var1 = 0; var1 < 4; ++var1) {
            cells[var0][var1].removeAll();
            cells[var0][var1].setBackground(Color.white);
            cells[var0][var1].repaint();
         }
      }

   }

   private static void drawSnakesAndLadders(Board var0) {
      Iterator var1 = var0.ladders.keySet().iterator();

      while(var1.hasNext()) {
         int var2 = (Integer)var1.next();
         int[] var3 = getCell(var2);
         cells[var3[0]][var3[1]].setBackground(Color.GREEN);
      }

      var1 = var0.snakes.entrySet().iterator();

      while(var1.hasNext()) {
         Map.Entry var7 = (Map.Entry)var1.next();
         int var8 = (Integer)var7.getKey();
         int var4 = (Integer)var7.getValue();
         int[] var5 = getCell(var8);
         int[] var6 = getCell(var4);
         cells[var5[0]][var5[1]].setBackground(Color.DARK_GRAY);
         cells[var6[0]][var6[1]].setBackground(Color.LIGHT_GRAY);
      }

   }

   private static void updateBoard(Player[] var0, Board var1) {
      clearBoard();
      drawSnakesAndLadders(var1);
      Player[] var2 = var0;
      int var3 = var0.length;

      for(int var4 = 0; var4 < var3; ++var4) {
         Player var5 = var2[var4];
         int var6 = var5.getPosition();
         if (var6 > 0) {
            int[] var7 = getCell(var6);
            JPanel var8 = cells[var7[0]][var7[1]];
            JPanel var9 = new JPanel();
            var9.setBackground(var5.getColor());
            var9.setPreferredSize(new Dimension(20, 20));
            var8.add(var9);
            var8.revalidate();
            var8.repaint();
         }
      }

   }

   private static int[] getCell(int var0) {
      int var1 = 3 - (var0 - 1) / 4;
      int var2 = (var0 - 1) % 4;
      if ((3 - var1) % 2 == 1) {
         var2 = 3 - var2;
      }

      return new int[]{var1, var2};
   }
}
